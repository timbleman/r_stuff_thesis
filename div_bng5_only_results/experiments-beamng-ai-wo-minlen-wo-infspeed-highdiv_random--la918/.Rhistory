# ugly and hacky, lol
names = "Jaccard                     Sliding window SDL_2D        Sliding window CUR_SDL"
barplot(vec, ylab="time in seconds", col=cols, xlab=names)
# bar plots for alphabet length compare times
library(ggplot2)
library(hrbrthemes)
Jaccard_comp_times <- c("28" = 4.79, "44" = 5.34, "60" = 6.07, " "=0)
SDL_2D_comp_times <- c("28" = 55.34, "44" = 57.25, "60" = 62.59, " "=0)
CUR_SDL_comp_times <- c("7" = 26.93, "11" = 28.71, "15" =31.04)
#df <- data.frame(Jaccard_comp_times, SDL_2D_comp_times, CUR_SDL_comp_times)
#names(df) <- c("jaccard_28", "jaccard_44", "jaccard_60")
vec <- c(Jaccard_comp_times, SDL_2D_comp_times, CUR_SDL_comp_times)
#vec <- c("jaccard_28" = Jaccard_comp_times,
#		"jaccard_44" = SDL_2D_comp_times,
#		"jaccard_60"=CUR_SDL_comp_times)
# ugly and hacky, lol
cols <- c("#CCCC00", "#CCCCFF", "#00FF99", "#00FF99",
"#CCCC00", "#CCCCFF", "#00FF99", "#00FF99",
"#CCCC00", "#CCCCFF", "#00FF99", "#00FF99")
# ugly and hacky, lol
names = "Jaccard                     Sliding window SDL_2D        Sliding window CUR_SDL"
barplot(vec, ylab="time in seconds", col=cols, xlab=names)
# bar plots for alphabet length compare times
library(ggplot2)
library(hrbrthemes)
Jaccard_comp_times <- c("28" = 4.79, "44" = 5.34, "60" = 6.07, " "=0)
SDL_2D_comp_times <- c("28" = 55.34, "44" = 57.25, "60" = 62.59, " "=0)
CUR_SDL_comp_times <- c("7" = 26.93, "11" = 28.71, "15" =31.04)
#df <- data.frame(Jaccard_comp_times, SDL_2D_comp_times, CUR_SDL_comp_times)
#names(df) <- c("jaccard_28", "jaccard_44", "jaccard_60")
vec <- c(Jaccard_comp_times, SDL_2D_comp_times, CUR_SDL_comp_times)
#vec <- c("jaccard_28" = Jaccard_comp_times,
#		"jaccard_44" = SDL_2D_comp_times,
#		"jaccard_60"=CUR_SDL_comp_times)
# ugly and hacky, lol
first_col <- "#FEEB65"
second_col <- "#E4521B"
third_col <- "#4D342F"
cols <- c(first_col, second_col, third_col, "#00FF99",
first_col, second_col, third_col, "#00FF99",
first_col, second_col, third_col, "#00FF99")
# ugly and hacky, lol
names = "Jaccard                     Sliding window SDL_2D        Sliding window CUR_SDL"
barplot(vec, ylab="time in seconds", col=cols, xlab=names)
?barplot
# bar plots for alphabet length compare times
library(ggplot2)
library(hrbrthemes)
Jaccard_comp_times <- c("28" = 4.79, "44" = 5.34, "60" = 6.07, " "=0)
SDL_2D_comp_times <- c("28" = 55.34, "44" = 57.25, "60" = 62.59, " "=0)
CUR_SDL_comp_times <- c("7" = 26.93, "11" = 28.71, "15" =31.04)
#df <- data.frame(Jaccard_comp_times, SDL_2D_comp_times, CUR_SDL_comp_times)
#names(df) <- c("jaccard_28", "jaccard_44", "jaccard_60")
vec <- c(Jaccard_comp_times, SDL_2D_comp_times, CUR_SDL_comp_times)
#vec <- c("jaccard_28" = Jaccard_comp_times,
#		"jaccard_44" = SDL_2D_comp_times,
#		"jaccard_60"=CUR_SDL_comp_times)
# ugly and hacky, lol
first_col <- "#FEEB65"
second_col <- "#E4521B"
third_col <- "#4D342F"
cols <- c(first_col, second_col, third_col, "#00FF99",
first_col, second_col, third_col, "#00FF99",
first_col, second_col, third_col, "#00FF99")
# ugly and hacky, lol
names = "Jaccard                     Sliding window SDL_2D        Sliding window CUR_SDL"
barplot(vec, ylab="time in seconds", col=cols, xlab=names, border=par(lty=0))
# calculates the average similarity for a number of sambled subsets
# if larger than subset, all are taken
step = 31
# metric to compute the average score on
similarity_metric = "jaccard_11ang_7len.csv"
# select a dataset
bng_or_drvr = "bng"
# TODO move in a extra file
# add paths to the subsets
if(bng_or_drvr == "bng"){
higher_level_folder <- "C:/CS1_R-Intro/div_bng5_only_results/"
paths_lowdiv_obe <- c("experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la111",
"experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la111",
"experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la617",
"experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la219",
"experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la811"
)
paths_hidiv_obe <- c("experiments-beamng-ai-wo-minlen-wo-infspeed-highdiv_random--la111",
"experiments-beamng-ai-wo-minlen-wo-infspeed-highdiv_random--la111",
"experiments-beamng-ai-wo-minlen-wo-infspeed-highdiv_random--la617",
"experiments-beamng-ai-wo-minlen-wo-infspeed-highdiv_random--la219",
"experiments-beamng-ai-wo-minlen-wo-infspeed-highdiv_random--la811"
)
paths_lowdiv_nonobe <- c("experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la311",
"experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la222",
"experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la711",
"experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la84",
"experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la918"
)
paths_hidiv_nonobe <- c("experiments-beamng-ai-wo-minlen-wo-infspeed-highdiv_random--la311",
"experiments-beamng-ai-wo-minlen-wo-infspeed-highdiv_random--la222",
"experiments-beamng-ai-wo-minlen-wo-infspeed-highdiv_random--la711",
"experiments-beamng-ai-wo-minlen-wo-infspeed-highdiv_random--la84",
"experiments-beamng-ai-wo-minlen-wo-infspeed-highdiv_random--la918"
)
random_sampling <- c("experiments-beamng-ai-wo-minlen-wo-infspeed--random0",
"experiments-beamng-ai-wo-minlen-wo-infspeed--random1",
"experiments-beamng-ai-wo-minlen-wo-infspeed--random2",
"experiments-beamng-ai-wo-minlen-wo-infspeed--random3",
"experiments-beamng-ai-wo-minlen-wo-infspeed--random4")
parent_suite <- "C:/CS1_R-Intro/experiments-beamng-ai-wo-minlen-wo-infspeed-7-steering-4-len-20200821T084856Z-001"
png_save_path <- "C:/CS1_R-Intro/RQ4/bng_5_subsets"
} else if (bng_or_drvr == "drvr"){
# dummy stuff, remove
higher_level_folder <- "C:/CS1_R-Intro/div_drvr5_only_results/"
paths_lowdiv_obe <- c("experiments-driver-ai-wo-minlen-wo-infspeed-lowdiv_random--la219",
"experiments-driver-ai-wo-minlen-wo-infspeed-lowdiv_random--la318",
"experiments-driver-ai-wo-minlen-wo-infspeed-lowdiv_random--la520",
"experiments-driver-ai-wo-minlen-wo-infspeed-lowdiv_random--la438",
"experiments-driver-ai-wo-minlen-wo-infspeed-lowdiv_random--la712"
)
paths_hidiv_obe <- c("experiments-driver-ai-wo-minlen-wo-infspeed-highdiv_random--la219",
"experiments-driver-ai-wo-minlen-wo-infspeed-highdiv_random--la318",
"experiments-driver-ai-wo-minlen-wo-infspeed-highdiv_random--la520",
"experiments-driver-ai-wo-minlen-wo-infspeed-highdiv_random--la438",
"experiments-driver-ai-wo-minlen-wo-infspeed-highdiv_random--la712"
)
paths_lowdiv_nonobe <- c("experiments-driver-ai-wo-minlen-wo-infspeed-lowdiv_one-plus-o212",
"experiments-driver-ai-wo-minlen-wo-infspeed-lowdiv_random--la42",
"experiments-driver-ai-wo-minlen-wo-infspeed-lowdiv_random--la68",
"experiments-driver-ai-wo-minlen-wo-infspeed-lowdiv_random--la94",
"experiments-driver-ai-wo-minlen-wo-infspeed-lowdiv_random--la1010"
)
paths_hidiv_nonobe <- c("experiments-driver-ai-wo-minlen-wo-infspeed-highdiv_one-plus-o212",
"experiments-driver-ai-wo-minlen-wo-infspeed-highdiv_random--la42",
"experiments-driver-ai-wo-minlen-wo-infspeed-highdiv_random--la68",
"experiments-driver-ai-wo-minlen-wo-infspeed-highdiv_random--la94",
"experiments-driver-ai-wo-minlen-wo-infspeed-highdiv_random--la1010"
)
random_sampling <- c("experiments-driver-ai-wo-minlen-wo-infspeed--random0",
"experiments-driver-ai-wo-minlen-wo-infspeed--random1",
"experiments-driver-ai-wo-minlen-wo-infspeed--random2",
"experiments-driver-ai-wo-minlen-wo-infspeed--random3",
"experiments-driver-ai-wo-minlen-wo-infspeed--random4"
)
parent_suite <- "C:/CS1_R-Intro/driver-ai-wo-minlen-wo-infspeed-7-steering-4-len-20200818T120651Z-001"
png_save_path <- "C:/CS1_R-Intro/RQ4/drvr_5_subsets"
}
# create list of paths for iterating
listed_set_paths <- list("paths_lowdiv" = c(paths_lowdiv_obe, paths_hidiv_obe),
"paths_hidiv" = c(paths_lowdiv_obe, paths_hidiv_obe),
"random_sampling" = random_sampling)
# add the parent path to each folder
for (i in 1:length(listed_set_paths)){
for (j in 1:length(listed_set_paths[[i]])){
listed_set_paths[[i]][j] <- paste(higher_level_folder,
listed_set_paths[[i]][j], sep="")
}
}
# copied from sampled_subset_coverage_development.R
# extracts an ordered list of the subset population
get_order <- function(set_path){
# seems to be working as it should
setwd(set_path)
target_file <- "for_each_sampling_index.csv"
if (file.exists(target_file)){
all_tests <- read.csv(target_file, row.names=1)
all_selected <- subset(all_tests, sampling_index != -1)
ordered_selected <- all_selected[order(all_selected$sampling_index),,drop=FALSE]
ordered_names <- rownames(ordered_selected)
} else {
print(paste("Warning", target_file, "has not been found in", set_path))
print("Now using a random order.")
ordered_names <- get_random_order(set_path)
}
return(ordered_names)
}
listed_set_paths[[1]]
listed_set_paths[[1]][1]
setwd(listed_set_paths[[1]][1])
get_order("C:/CS1_R-Intro/div_bng5_only_results/experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la111"=)
get_order("C:/CS1_R-Intro/div_bng5_only_results/experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la111")
get_order("C:/CS1_R-Intro/div_bng5_only_results/experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la111")[1:10]
ten_ord = get_order("C:/CS1_R-Intro/div_bng5_only_results/experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la111")[1:10]
dist_m <- read.csv(similarity_metric, check.names = FALSE, row.names = 1)
# metric to compute the average score on
similarity_metric = "jaccard_11ang_4len.csv"
dist_m <- read.csv(similarity_metric, check.names = FALSE, row.names = 1)
head(dist_m)
dist_m[ten_ord, ten_ord]
three_ord = get_order("C:/CS1_R-Intro/div_bng5_only_results/experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la111")[1:3]
dist_m[three_ord, three_ord]
get_order("C:/CS1_R-Intro/div_bng5_only_results/experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la111")
rowlength(dist_m)
rowlen(dist_m)
rownum(dist_m)
numrow(dist_m)
nrow(dist_m)
dist_m[three_ord, three_ord]
mean(dist_m[three_ord, three_ord])
dist_m[three_ord, three_ord][,]
as.numeric(dist_m[three_ord, three_ord])
data.matrix(dist_m[three_ord, three_ord])
mean(data.matrix(dist_m[three_ord, three_ord]))
# cacluates the average distance a a certain number of neighbors
get_partial_avg_dist <- function(set_path, metr_name, step){
setwd(set_path)
ord <- get_order(set_path)
sim_matr <- read.csv(metr_name, check.names=FALSE, row.names=1)
# take only the distances of the first n tests
if (step < nrow(sim_matr) & step > 0){
first_tests <- ord[1:step]
sim_matr <- sim_matr[first_tests, first_tests]
}
return (mean(data.matrix(sim_matr)))
}
get_partial_avg_dist("C:/CS1_R-Intro/div_bng5_only_results/experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la111", similarity_metric, 32)
get_partial_avg_dist("C:/CS1_R-Intro/div_bng5_only_results/experiments-beamng-ai-wo-minlen-wo-infspeed-lowdiv_random--la111", similarity_metric, 10)
get_partial_avg_dist("C:/CS1_R-Intro/div_bng5_only_results/experiments-beamng-ai-wo-minlen-wo-infspeed-highdiv_random--la111", similarity_metric, 10)
# get the average similarity at a number of neighbors for multiple subsets
get_avg_vec <- function(paths_vec, similarity_metric, step){
vals_vec <- rep(0, length(paths_vec))
i <- 1
for (p in paths_vec){
avg_sim <- get_partial_avg_dist(p, similarity_metric, step)
vals_vec[i] <- avg_sim
i <- i + 1
}
return(vals_vec)
}
# compares two different configurations for multiple subsets (e.g. high vs low diversity)
# use names to make plotting more readable
compare_two_conf_avgs <- function(paths_vec_1, paths_vec_2, names=NA,
similarity_metric=similarity_metric,
step=step){
vec1 <- get_avg_vec(paths_vec_1, similarity_metric, step)
vec2 <- get_avg_vec(paths_vec_2, similarity_metric, step)
if (is.NA(names)){
names <- c("config 1", "config 2")
}
print(paste("Comparing", names[1], "to", names[2], "at step", step))
print(paste("Avg", names[1], ":", mean(vec1), ";", names[2], ":", mean(vec2)))
}
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]])
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]])
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]])
# compares two different configurations for multiple subsets (e.g. high vs low diversity)
# use names to make plotting more readable
compare_two_conf_avgs <- function(paths_vec_1, paths_vec_2, names=NA,
similarity_metric=similarity_metric,
step=step){
vec1 <- get_avg_vec(paths_vec_1, similarity_metric, step)
vec2 <- get_avg_vec(paths_vec_2, similarity_metric, step)
if (is.NA(names)){
names <- c("config 1", "config 2")
}
print(paste("Comparing", names[1], "to", names[2], "at step", step))
#print(paste("Avg", names[1], ":", mean(vec1), ";", names[2], ":", mean(vec2)))
}
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]])
# compares two different configurations for multiple subsets (e.g. high vs low diversity)
# use names to make plotting more readable
compare_two_conf_avgs <- function(paths_vec_1, paths_vec_2, names=NA,
similarity_metric=similarity_metric,
step=step){
vec1 <- get_avg_vec(paths_vec_1, similarity_metric, step)
vec2 <- get_avg_vec(paths_vec_2, similarity_metric, step)
if (is.NA(names)){
names <- c("config 1", "config 2")
}
#print(paste("Comparing", names[1], "to", names[2], "at step", step))
#print(paste("Avg", names[1], ":", mean(vec1), ";", names[2], ":", mean(vec2)))
}
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]])
get_avg_vec(listed_set_paths[[1]])
get_avg_vec(listed_set_paths[[1]], similarity_metric, step)
get_avg_vec(listed_set_paths[[2]], similarity_metric, step)
# create list of paths for iterating
listed_set_paths <- list("paths_lowdiv" = c(paths_lowdiv_obe, paths_hidiv_obe),
"paths_hidiv" = c(paths_lowdiv_nonobe, paths_hidiv_nonobe),
"random_sampling" = random_sampling)
# add the parent path to each folder
for (i in 1:length(listed_set_paths)){
for (j in 1:length(listed_set_paths[[i]])){
listed_set_paths[[i]][j] <- paste(higher_level_folder,
listed_set_paths[[i]][j], sep="")
}
}
get_avg_vec(listed_set_paths[[2]], similarity_metric, step)
# compares two different configurations for multiple subsets (e.g. high vs low diversity)
# use names to make plotting more readable
compare_two_conf_avgs <- function(paths_vec_1, paths_vec_2, names,
similarity_metric,
step){
vec1 <- get_avg_vec(paths_vec_1, similarity_metric, step)
vec2 <- get_avg_vec(paths_vec_2, similarity_metric, step)
if (is.NA(names)){
names <- c("config 1", "config 2")
}
#print(paste("Comparing", names[1], "to", names[2], "at step", step))
#print(paste("Avg", names[1], ":", mean(vec1), ";", names[2], ":", mean(vec2)))
}
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, step)
# compares two different configurations for multiple subsets (e.g. high vs low diversity)
# use names to make plotting more readable
compare_two_conf_avgs <- function(paths_vec_1, paths_vec_2, names,
similarity_metric,
step){
vec1 <- get_avg_vec(paths_vec_1, similarity_metric, step)
vec2 <- get_avg_vec(paths_vec_2, similarity_metric, step)
if (is.na(names)){
names <- c("config 1", "config 2")
}
#print(paste("Comparing", names[1], "to", names[2], "at step", step))
#print(paste("Avg", names[1], ":", mean(vec1), ";", names[2], ":", mean(vec2)))
}
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, step)
# compares two different configurations for multiple subsets (e.g. high vs low diversity)
# use names to make plotting more readable
compare_two_conf_avgs <- function(paths_vec_1, paths_vec_2, names,
similarity_metric,
step){
vec1 <- get_avg_vec(paths_vec_1, similarity_metric, step)
vec2 <- get_avg_vec(paths_vec_2, similarity_metric, step)
if (is.na(names)){
names <- c("config 1", "config 2")
}
print(paste("Comparing", names[1], "to", names[2], "at step", step))
print(paste("Avg", names[1], ":", mean(vec1), ";", names[2], ":", mean(vec2)))
}
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, step)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 10)
get_avg_vec(listed_set_paths[[2]], similarity_metric, step)
get_avg_vec(listed_set_paths[[1]], similarity_metric, step)
get_avg_vec(listed_set_paths[[1]], similarity_metric, 10)
get_avg_vec(listed_set_paths[[2]], similarity_metric, 10)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 5)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[3]], NA, similarity_metric, 30)
# if no order of sampling is defined
# use the names found in a dummy file and return a random order
get_random_order <- function(set_path){
setwd(set_path)
# use for_each_num_obes.csv as dummy file
for_each_num_obes <- read.csv("for_each_num_obes.csv", row.names=1)
shuffeled_names <- sample(rownames(for_each_num_obes))
return(shuffeled_names)
}
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[3]], NA, similarity_metric, 30)
# if no order of sampling is defined
# use the names found in a dummy file and return a random order
get_random_order <- function(set_path){
setwd(set_path)
# use for_each_num_obes.csv as dummy file
for_each_num_obes <- read.csv("for_each_num_obes.csv", check.names=FALSE, row.names=1)
shuffeled_names <- sample(rownames(for_each_num_obes))
return(shuffeled_names)
}
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[3]], NA, similarity_metric, 30)
# compares two different configurations for multiple subsets (e.g. high vs low diversity)
# use names to make plotting more readable
compare_two_conf_avgs <- function(paths_vec_1, paths_vec_2, names,
similarity_metric,
step){
vec1 <- get_avg_vec(paths_vec_1, similarity_metric, step)
vec2 <- get_avg_vec(paths_vec_2, similarity_metric, step)
if (is.na(names)){
names <- c("config 1", "config 2")
}
print(paste("Comparing", names[1], "to", names[2], "at step", step))
print(paste("Avg", names[1], ":", mean(vec1), ";", names[2], ":", mean(vec2)))
print(paste("Wilcox", wilcox.test(vec1, vec2)))
}
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 30)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 20)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 25)
?wilcox.test
# compares two different configurations for multiple subsets (e.g. high vs low diversity)
# use names to make plotting more readable
compare_two_conf_avgs <- function(paths_vec_1, paths_vec_2, names,
similarity_metric,
step){
vec1 <- get_avg_vec(paths_vec_1, similarity_metric, step)
vec2 <- get_avg_vec(paths_vec_2, similarity_metric, step)
if (is.na(names)){
names <- c("config 1", "config 2")
}
print(paste("Comparing", names[1], "to", names[2], "at step", step))
print(paste("Avg", names[1], ":", mean(vec1), ";", names[2], ":", mean(vec2)))
print(paste("Wilcox", wilcox.test(vec1, vec2))[p.value])
}
?wilcox.test
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 25)
vec <- c(1,2,3,45,5)
vec2 <- c(5,2,2,45,5)
wilcox.test(vec, vec2)
wilc <- wilcox.test(vec, vec2)
wilc
View(wilc)
View(wilc[p.value])
View(wilc["p.value"])
# compares two different configurations for multiple subsets (e.g. high vs low diversity)
# use names to make plotting more readable
compare_two_conf_avgs <- function(paths_vec_1, paths_vec_2, names,
similarity_metric,
step){
vec1 <- get_avg_vec(paths_vec_1, similarity_metric, step)
vec2 <- get_avg_vec(paths_vec_2, similarity_metric, step)
if (is.na(names)){
names <- c("config 1", "config 2")
}
print(paste("Comparing", names[1], "to", names[2], "at step", step))
print(paste("Avg", names[1], ":", mean(vec1), ";", names[2], ":", mean(vec2)))
print(paste("Wilcox", wilcox.test(vec1, vec2))["p.value"])
}
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 25)
# compares two different configurations for multiple subsets (e.g. high vs low diversity)
# use names to make plotting more readable
compare_two_conf_avgs <- function(paths_vec_1, paths_vec_2, names,
similarity_metric,
step){
vec1 <- get_avg_vec(paths_vec_1, similarity_metric, step)
vec2 <- get_avg_vec(paths_vec_2, similarity_metric, step)
if (is.na(names)){
names <- c("config 1", "config 2")
}
print(paste("Comparing", names[1], "to", names[2], "at step", step))
print(paste("Avg", names[1], ":", mean(vec1), ";", names[2], ":", mean(vec2)))
print(paste("Wilcox", wilcox.test(vec1, vec2)))
}
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 25)
# compares two different configurations for multiple subsets (e.g. high vs low diversity)
# use names to make plotting more readable
compare_two_conf_avgs <- function(paths_vec_1, paths_vec_2, names,
similarity_metric,
step){
vec1 <- get_avg_vec(paths_vec_1, similarity_metric, step)
vec2 <- get_avg_vec(paths_vec_2, similarity_metric, step)
if (is.na(names)){
names <- c("config 1", "config 2")
}
print(paste("Comparing", names[1], "to", names[2], "at step", step))
print(paste("Avg", names[1], ":", mean(vec1), ";", names[2], ":", mean(vec2)))
print(paste("Wilcox", names(wilcox.test(vec1, vec2))))
}
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 25)
# compares two different configurations for multiple subsets (e.g. high vs low diversity)
# use names to make plotting more readable
compare_two_conf_avgs <- function(paths_vec_1, paths_vec_2, names,
similarity_metric,
step){
vec1 <- get_avg_vec(paths_vec_1, similarity_metric, step)
vec2 <- get_avg_vec(paths_vec_2, similarity_metric, step)
if (is.na(names)){
names <- c("config 1", "config 2")
}
print(paste("Comparing", names[1], "to", names[2], "at step", step))
print(paste("Avg", names[1], ":", mean(vec1), ";", names[2], ":", mean(vec2)))
print(paste("Wilcox", wilcox.test(vec1, vec2)["p.value"]))
}
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 25)
# compares two different configurations for multiple subsets (e.g. high vs low diversity)
# use names to make plotting more readable
compare_two_conf_avgs <- function(paths_vec_1, paths_vec_2, names,
similarity_metric,
step){
vec1 <- get_avg_vec(paths_vec_1, similarity_metric, step)
vec2 <- get_avg_vec(paths_vec_2, similarity_metric, step)
if (is.na(names)){
names <- c("config 1", "config 2")
}
print(paste("Comparing", names[1], "to", names[2], "at step", step))
print(paste("Avg", names[1], ":", mean(vec1), ";", names[2], ":", mean(vec2)))
print(paste("Wilcox p-value", wilcox.test(vec1, vec2)["p.value"]))
}
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 25)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 30)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 20)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 22)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 25)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 30)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 28)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 26)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 27)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 5)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 2)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 3)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], NA, similarity_metric, 10)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 10)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 5)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 15)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 15)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 5)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 4)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 3)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 4)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 30)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 25)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 24)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 23)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 22)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 21)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 20)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 18)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 13)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 15)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 26)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 27)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 10)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 11)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 12)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 13)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 9)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 8)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 5)
compare_two_conf_avgs(listed_set_paths[[1]], listed_set_paths[[2]], c("lowdiv", "hidiv"), similarity_metric, 27)
